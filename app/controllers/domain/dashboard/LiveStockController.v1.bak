<?php namespace Controllers\Domain\Dashboard\Report;
use \National as National;
use \Company as Company;
use \Farm as Farm;
use \Location as Location;
use \Partner as Partner;
use \Contract as Contract;
use \Abattoir as Abattoir;
use \CattleForSale as CattleForSale;
use \CowDeath as CowDeath;
class LiveStockController extends \BaseController{


	// Xu ly hien thi bang dieu khien bao cao
	public function getIndex(){
		$realQtyCountries = $this->getRealQuantityCountries();
		$importQtyCountries = $this->getImportQuantityCountries();
		$exportQtyCountries = $this->getExportQuantityCountries();
		$deathQtyCountries = $this->getDeathQuantityCountries();
		$data = array();
		$totalRealQty = 0;
		$totalImpQty = 0;
		$totalExpQty = 0;
		$totalDeathQty = 0;
		foreach($realQtyCountries as $country){
			$totalRealQty += $country['sumQty'] ;
		}
		foreach($importQtyCountries as $country){
			$totalImpQty += $country['sumQty'];
		}
		foreach($exportQtyCountries as $country){
			$totalExpQty += $country['sumQty'];
		}
		foreach ($deathQtyCountries as $country) {
			$totalDeathQty += $country['sumQty'];
		}
		$data['totalRealQtyCountries'] = $totalRealQty;
		$data['totalImportQtyCountries'] = $totalImpQty;
		$data['totalExportQtyCountries'] = $totalExpQty;
		$data['totalDeathQtyCountries'] = $totalDeathQty;
		/*echo "<pre>";
		print_r($realQtyContries);
		echo "<pre>";*/
		return \View::make('dashboard.report.livestock.index')
					->with('title',"Báo cáo chăn nuôi bò thịt")
					->with('data',$data);
	}

	public function getRealQuantity($country = null){
		if($country != null){
			$data = $this->getRealQuantityByCountry($country);
			/*echo "<pre>";
			print_r($data);
			echo "</pre>";	*/		
			return \View::make('dashboard.report.livestock.real-quantity-by-country')
						->with('title',"Báo cáo số lượng bò thực tế")
						->with('data',$data);		
			
		}else{
			// Truong hop khong co tham so hien thi tat ca cac quoc gia
			$data = array();
			$data = $this->getRealQuantityCountries();
		/*	echo "<pre>";
			print_r($data);
			echo "</pre>";*/
			return \View::make('dashboard.report.livestock.real-quantity')
						->with('title',"Báo cáo số lượng bò thực tế")
						->with('data',$data);
		}	
	}

	public function getImportQuantity($partner = null){
		if($partner != null){
			$data = $this->getImportByPartner($partner);
		/*	echo "<pre>";
			print_r($data);
			echo "</pre>";*/
			return \View::make('dashboard.report.livestock.import-by-partner')
						->with('title',"Báo cáo số lượng bò nhập")
						->with('data',$data);
		}else{
			$data = array();
			$data = $this->getImportPartners();
		/*		echo "<pre>";
			print_r($data);
			echo "</pre>";*/
			return \View::make('dashboard.report.livestock.import')
						 ->with('title',"Báo cáo số lượng bò nhập")
						 ->with('data',$data);
		}
	}
	
	public function getCattleForSale($abattoir = null){
		if($abattoir != null){
			$data = $this->getCattleForSaleByAbattoir($abattoir);
			/*echo "<pre>";
			print_r($data);
			echo "</pre>";*/
			return \View::make('dashboard.report.livestock.cattle-for-sale-by-abattoir')
						->with('title',"Báo cáo số lượng bò xuất bán")
						->with('data',$data);
		}else{
			$data = array();
			$data = $this->getCattleForSaleAbattoirs();
			/*echo "<pre>";
			print_r($data);
			echo "</pre>";*/
			return \View::make('dashboard.report.livestock.cattle-for-sale')
						 ->with('title',"Báo cáo số lượng bò xuất bán")
						 ->with('data',$data);
		}

	}

	public function getDeathQuantity($country = null){
		if($country != null){
			$data = $this->getDeathQuantityByCountry($country);
			return \View::make('dashboard.report.livestock.deathquantitybycountry')
						->with('title',"Báo cáo số lượng bò chết")
						->with('data',$data);
		}else{
			$data = array();
			$data = $this->getDeathQuantityCountries();
			return \View::make('dashboard.report.livestock.deathquantity')
						 ->with('title',"Báo cáo số lượng bò chết")
						 ->with('data',$data);
		}
	}
	//Lay so luong bo thuc te cua tat ca cac quoc gia
	private function getRealQuantityCountries(){
		$result = array();
		$countries = National::all();
		foreach ($countries as $country) {
			$realQty = $this->quantityJson2Array($country->real_quantity);	
			$result[$country->id] = $realQty;
			$result[$country->id]['id'] = $country['id'];
			$result[$country->id]['name'] = $country['name'];
			$result[$country->id]['updated_at'] = $country['updated_at'];
		}

		return $result;
	}
	
	private function getRealQuantityByCountry($countryID){
		$country = National::find($countryID);	
		$companies = Company::where("nationalID",$countryID)->get();
		$farmsByCompany = array();
		$companyData = array();
		foreach ($companies as $company) {
			$realQty = $this->quantityJson2Array($company->real_quantity);
			$companyData[$company->id] = $realQty;
			$companyData[$company->id]['id'] = $company->id;
			$companyData[$company->id]['name'] = $company->name;
			$companyData[$company->id]['updated_at'] = $company->updated_at;
			// Data cua farms lien quan den company
			$farmsByCompany[$company->id] = Farm::where('companyID',$company->id)->get()->toArray();
		}
		$data = array();
		$data['country']['name'] = $country->name;
		$data['country']['id'] = $country->id;
		$data['companies'] = $companyData;		
		// Thuc hien dinh dang lai cot real_quantity cua farm thanh mang
		foreach($farmsByCompany as $key1 => $farms){
			$qtyConverted = array()	;
			foreach($farms as $key2 => $farm){
				$qtyConverted = $this->quantityJson2Array($farm['real_quantity']);
				$farmsByCompany[$key1][$key2]['real_quantity'] = $qtyConverted;
			}
		}
		$data['farms'] = $farmsByCompany;
		//
		$locations = Location::where('nationalID',$countryID)->get();
		$lcoationData = array();
		foreach($locations as $key => $location){
			$realQty = $this->quantityJson2Array($location->real_quantity);
			$lcoationData[$location->id] = $realQty;
			$lcoationData[$location->id]['name'] = $location->name;
			$lcoationData[$location->id]['updated_at'] = $location->updated_at;
		}
		$data['locations'] = $lcoationData;
		return $data;		
	}

	private function getImportQuantityCountries(){
		$result = array();
		$countries = National::all();
		foreach($countries as $country){
			$realQty = $this->quantityJson2Array($country->import_quantity);	
			$result[$country->id] = $realQty;
			$result[$country->id]['id'] = $country['id'];
			$result[$country->id]['name'] = $country['name'];
			$result[$country->id]['updated_at'] = $country['updated_at'];
		}
		return $result;
	}

	private function getImportPartners(){
		$data = array();
		$dataPartner = array();
		$dataContracts = array();
		$partners = Partner::all();		
		if(count($partners) > 0){
			foreach($partners as $key =>$partner){
				$dataPartner[$partner->id] = $this->quantityJson2Array($partner->import_quantity);
				$dataPartner[$partner->id]['name'] = $partner->name;
				$dataPartner[$partner->id]['id'] = $partner->id;
				$dataPartner[$partner->id]['import_counts'] = $partner->import_counts;
				$dataPartner[$partner->id]['updated_at'] = $partner->updated_at;
				$dataPartner[$partner->id]['avg_price'] =$this->priceJson2Array($partner->import_avg_prices);
			}
		}
		// Lay hop dong chua hoan thanh
		$contracts = Contract::where('imp_status',0)->get();
		if(count($contracts) > 0){
			foreach($contracts as $contract){
				$dataContracts[$contract->id] = $contract;
				$sumQty = $contract->feedersteer_quantity + $contract->feederheifer_quantity + $contract->breederbull_quantity + $contract->breederheifer_quantity;
				$sumWeight = $contract->feedersteer_quantity * $contract->feedersteer_weight + $contract->feederheifer_quantity * $contract->feederheifer_weight + $contract->breederbull_quantity * $contract->breederbull_weight + $contract->breederheifer_quantity * $contract->breederheifer_weight;
				$sumPrice = $contract->feedersteer_quantity * $contract->feedersteer_weight * $contract->feedersteer_price + $contract->feederheifer_quantity * $contract->feederheifer_weight * $contract->feederheifer_price + $contract->breederbull_quantity * $contract->breederbull_weight * $contract->breederbull_price + $contract->breederheifer_quantity * $contract->breederheifer_weight * $contract->breederheifer_price;
				$dataContracts[$contract->id]['sumQty'] = $sumQty;
				$dataContracts[$contract->id]['sumWeight'] = $sumWeight;
				$dataContracts[$contract->id]['sumPrice'] = $sumPrice;
			}
		}
		$data['partners'] = $dataPartner;
		$data['contracts'] = $dataContracts;
		return $data;
	}

	private function getImportByPartner($partnerId){
		
		$partner = Partner::find($partnerId);
		$contracts = Contract::where('partner_id',$partnerId)->get();		
		$data = array();
		if(!$contracts->isEmpty()){
			foreach($contracts as $contract){
				$data['contracts'][$contract->id] = $contract;
				if($contract->imp_status == 1){
					if($contract->diff_total_quantity != 0 || $contract->diff_total_weight != 0){
						$data['contracts'][$contract->id]['imp_status_text'] = "Đã hoàn thành có chênh lệch";
					}else{
						$data['contracts'][$contract->id]['imp_status_text'] = "Đã hoàn thành";
					}
				}
				//
				$sumQty = $contract->feedersteer_quantity + $contract->feederheifer_quantity + $contract->breederbull_quantity + $contract->breederheifer_quantity;
				$sumWeight = $contract->feedersteer_weight * $contract->feedersteer_quantity + $contract->feederheifer_weight * $contract->feederheifer_quantity + $contract->breederbull_weight * $contract->breederbull_quantity  + $contract->breederheifer_weight * $contract->breederheifer_quantity ;
				$sumPrice = $contract->feedersteer_quantity * $contract->feedersteer_weight * $contract->feedersteer_price + $contract->feederheifer_quantity * $contract->feederheifer_weight * $contract->feederheifer_price + $contract->breederbull_quantity * $contract->breederbull_weight * $contract->breederbull_price + $contract->breederheifer_quantity * $contract->breederheifer_weight * $contract->breederheifer_price;
				$data['contracts'][$contract->id]['sumQty'] = $sumQty;
				$data['contracts'][$contract->id]['sumWeight'] = $sumWeight;
				$data['contracts'][$contract->id]['sumPrice'] = $sumPrice;
			}
		}else{
			$data['contracts'] = array();
		}
		$data['partner'] = $partner ->name;
		return $data;
	}


	private function getCattleForSaleAbattoirs(){
		$data = array();
		$data['abattoirs'] = array();
		$data['cattleForSalesPerMonth'] = array();
		$abattoirs = Abattoir::all();
		
		if(count($abattoirs) > 0){
			foreach($abattoirs as $key => $abattoir){
				$data['abattoirs'][$abattoir->id]['name'] = $abattoir->name;
				$exportQtyData = json_decode($abattoir->export_quantity,true);

				$sumQty = 0;
				$numOfFromPartner = 0;
				foreach ($exportQtyData as $key => $value) {
					$data['abattoirs'][$abattoir->id]['from_partner'][$key] = array(
						"name" => $value['name'],
						"quantity" => $value['quantity']
					);
					$numOfFromPartner ++;
					$sumQty += $value['quantity'];
				}
				$data['abattoirs'][$abattoir->id]['numOfFromPartner'] = $numOfFromPartner;
				$data['abattoirs'][$abattoir->id]['sumQuantity']= $sumQty;
				$data['abattoirs'][$abattoir->id]['exportCounts'] = $abattoir->export_counts;
				$data['abattoirs'][$abattoir->id]['totalPrice'] = $abattoir->export_total_prices;
				$data['abattoirs'][$abattoir->id]['updateDate'] = $abattoir->updated_at;
			}
			$cattleForSalesPerMonth = $this->getCattleForSalePerMonth($abattoirs);
			if(count($cattleForSalesPerMonth) > 0){
				$data['cattleForSalesPerMonth'] = $cattleForSalesPerMonth;
			}
		}
		return $data;
	}

	private function getCattleForSaleByAbattoir($id){
		$abattoir = Abattoir::find($id);
		$cattles = CattleForSale::Where('abattoir_id',$id)->get()->toArray();
		$data = array();
		if($abattoir){
			$data['abattoir'] = $abattoir->name;
		}else{
			$data['abattoir'] = "";
		}

		if($cattles){
			foreach($cattles as $key => $cattle){
				$data['cattleforsales'][$cattle['id']] = $cattle;
			}			
		}else{
			$data['cattleforsales'] = "";
		}
		return $data;
	}

	private function getExportQuantityCountries(){
		$result = array();
		$countries = National::all();
		foreach($countries as $country){
			$realQty = $this->quantityJson2Array($country->export_quantity);	
			$result[$country->id] = $realQty;
			$result[$country->id]['id'] = $country['id'];
			$result[$country->id]['name'] = $country['name'];
			$result[$country->id]['updated_at'] = $country['updated_at'];
		}
		return $result;
	}
	
	private function getExportQuantitybyCountry($country){
		$countryName = National::find($country);	
		$companies = Company::where("nationalID",$country)->get();
		$farmsByCompany = array();
		$companyData = array();
		foreach ($companies as $company) {
			$realQty = $this->quantityJson2Array($company->export_quantity);
			$companyData[$company->id] = $realQty;
			$companyData[$company->id]['id'] = $company->id;
			$companyData[$company->id]['name'] = $company->name;
			$companyData[$company->id]['updated_at'] = $company->updated_at;
			// Data cua farms lien quan den company
			$farmsByCompany[$company->id] = Farm::where('companyID',$company->id)->get()->toArray();
		}
		$data = array();
		$data['country']['name'] = $countryName->name;
		$data['country']['id'] = $countryName->id;
		$data['companies'] = $companyData;		
		// Thuc hien dinh dang lai cot real_quantity cua farm thanh mang
		foreach($farmsByCompany as $key1 => $farms){
			$qtyConverted = array()	;
			foreach($farms as $key2 => $farm){
				$qtyConverted = $this->quantityJson2Array($farm['export_quantity']);
				$farmsByCompany[$key1][$key2]['export_quantity'] = $qtyConverted;
			}
		}
		$data['farms'] = $farmsByCompany;
		return $data;		
	}

	private function getDeathQuantityCountries(){
		$result = array();
		$countries = National::all();
		foreach($countries as $country){
			$realQty = $this->quantityJson2Array($country->death_quantity);	
			$result[$country->id] = $realQty;
			$result[$country->id]['id'] = $country['id'];
			$result[$country->id]['name'] = $country['name'];
			$result[$country->id]['updated_at'] = $country['updated_at'];
		}
		return $result;
	}
	private function getDeathQuantityByCountry($country){
		$countryName = National::find($country);	
		$companies = Company::where("nationalID",$country)->get();
		$farmsByCompany = array();
		$companyData = array();
		foreach ($companies as $company) {
			$realQty = $this->quantityJson2Array($company->export_quantity);
			$companyData[$company->id] = $realQty;
			$companyData[$company->id]['id'] = $company->id;
			$companyData[$company->id]['name'] = $company->name;
			$companyData[$company->id]['updated_at'] = $company->updated_at;
			// Data cua farms lien quan den company
			$farmsByCompany[$company->id] = Farm::where('companyID',$company->id)->get()->toArray();
		}
		$data = array();
		$data['country']['name'] = $countryName->name;
		$data['country']['id'] = $countryName->id;
		$data['companies'] = $companyData;		
		// Thuc hien dinh dang lai cot real_quantity cua farm thanh mang
		foreach($farmsByCompany as $key1 => $farms){
			$qtyConverted = array()	;
			foreach($farms as $key2 => $farm){
				$qtyConverted = $this->quantityJson2Array($farm['death_quantity']);
				$farmsByCompany[$key1][$key2]['death_quantity'] = $qtyConverted;
			}
		}
		$data['farms'] = $farmsByCompany;
		return $data;		
	}
	private function quantityJson2Array($qtyJson){
		$result = array();
		$qtyJsonFormated = strtolower($qtyJson);
		$farmRealQty = json_decode($qtyJsonFormated,true);
	
		$feederSteer = $farmRealQty['feedersteer'];	
		$feederheifer = $farmRealQty['feederheifer'];
		$breederBull =  $farmRealQty['breederbull'];
		$breederheifer = $farmRealQty['breederheifer'];

		$result['sumQty'] = $feederSteer + $feederheifer + $breederBull + $breederheifer;
		$result['feederSteerQty'] = $feederSteer;
		$result['feederheiferQty'] = $feederheifer;
		$result['breederBullQty'] = $breederBull;
		$result['breederheiferQty'] = $breederheifer;
		return $result;
	}
	private function priceJson2Array($qtyJson){
		$result = array();
		$qtyJsonFormated = strtolower($qtyJson);
		$farmRealQty = json_decode($qtyJsonFormated,true);
	
		$feederSteer = $farmRealQty['feedersteer'];	
		$feederheifer = $farmRealQty['feederheifer'];
		$breederBull =  $farmRealQty['breederbull'];
		$breederheifer = $farmRealQty['breederheifer'];

		$result['feederSteerPrice'] = round($feederSteer,3);
		$result['feederHeiferPrice'] = round($feederheifer,3);
		$result['breederBullPrice'] = round($breederBull,3);
		$result['breederHeiferPrice'] = round($breederheifer,3);
		return $result;
	}

	private function getCattleForSalePerMonth($abattoirs){
		$data = array();
		$dataPricePerMonth = array();
		$numberOfAbattoir = count($abattoirs);
		$cattleForSales = \DB::table('cattle_for_sales');
		$currentYear = date('Y');
		$pricePerMonthFormated = array();
		for($i = 1; $i <= 12; $i++){
			$pricePerMonth = \DB::table('cattle_for_sales')
							->select(\DB::raw('abattoir_id, sum(prices) as sumPrices'))
							->whereRaw("month(date_left_feedlot) = $i and year(date_left_feedlot) = $currentYear")
							->groupBy('abattoir_id')
							->get();

			if(!empty($pricePerMonth)){
				foreach ($pricePerMonth as $key => $value) {
					$pricePerMonthFormated[$value->abattoir_id] = $value;
				}
				$dataPricePerMonth[$i] = $pricePerMonthFormated;
				$pricePerMonthFormated  = array();
			}else{
				$dataPricePerMonth[$i] = $pricePerMonth;
			}
		}
		foreach($dataPricePerMonth as $month => $abattoirPrices){
			$data[$month] = array();
			if(empty($abattoirPrices)){
				for($i=0;$i < $numberOfAbattoir; $i++) {
					array_push($data[$month],0);
				}
			}else{
				foreach ($abattoirs as $abattoir) {
					if(!array_key_exists($abattoir->id,$abattoirPrices)){
						array_push($data[$month],0);
					}else{
						array_push($data[$month],$abattoirPrices[$abattoir->id]->sumPrices);
					}
				}
			}

		}
		//return $abattoirs->toArray();
		//return $dataPricePerMonth;
		return $data;
	}

}